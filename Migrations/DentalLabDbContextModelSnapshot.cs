// <auto-generated />
using System;
using Dental_lab_Application_MVC_.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dental_lab_Application_MVC_.Migrations
{
    [DbContext(typeof(DentalLabDbContext))]
    partial class DentalLabDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<string>("BriefMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfAppointment")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServicesId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.DentalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DentalServices");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specializations")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CardNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<string>("Contact")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Interests")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Skills")
                        .HasColumnType("longtext");

                    b.Property<string>("SocialMediaLink")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50b815eb-02e3-4579-9a83-1d39884ee56c"),
                            Address = "",
                            Bio = "Easy going",
                            Contact = "07031054058",
                            DateCreated = new DateTime(2024, 4, 24, 15, 12, 17, 521, DateTimeKind.Local).AddTicks(3739),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "",
                            Gender = 0,
                            Interests = "Scatting, playing chess and cooking",
                            IsDeleted = false,
                            LastName = "",
                            ProfilePicture = "",
                            Skills = "Leather craft, Decoration",
                            SocialMediaLink = "",
                            UserId = new Guid("419460cf-bda5-41bd-a342-eb30c795fda3")
                        });
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PatientComplain")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReportContent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b541cc9-b08b-47d3-b52f-3ca6aa06a1e6"),
                            DateCreated = new DateTime(2024, 4, 24, 15, 12, 17, 521, DateTimeKind.Local).AddTicks(3572),
                            IsDeleted = false,
                            Name = "HeadDoctor"
                        },
                        new
                        {
                            Id = new Guid("0504ea46-35aa-4949-9c59-b8b32a083ef6"),
                            DateCreated = new DateTime(2024, 4, 24, 15, 12, 17, 521, DateTimeKind.Local).AddTicks(3641),
                            IsDeleted = false,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = new Guid("cf58ec7c-7829-4549-a924-ffe60ea3ca14"),
                            DateCreated = new DateTime(2024, 4, 24, 15, 12, 17, 521, DateTimeKind.Local).AddTicks(3663),
                            IsDeleted = false,
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashSalt")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("419460cf-bda5-41bd-a342-eb30c795fda3"),
                            DateCreated = new DateTime(2024, 4, 24, 15, 12, 17, 521, DateTimeKind.Local).AddTicks(3691),
                            IsDeleted = false,
                            Password = "headdoctor",
                            RoleId = new Guid("6b541cc9-b08b-47d3-b52f-3ca6aa06a1e6"),
                            UserEmail = "headdoctor@gmail.com",
                            UserName = "headdoctor"
                        });
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Appointment", b =>
                {
                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.User", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Doctor", b =>
                {
                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Patient", b =>
                {
                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Profile", b =>
                {
                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Dental_lab_Application_MVC_.Models.Entites.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Report", b =>
                {
                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.Appointment", "Appointment")
                        .WithOne("Reports")
                        .HasForeignKey("Dental_lab_Application_MVC_.Models.Entites.Report", "AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.User", b =>
                {
                    b.HasOne("Dental_lab_Application_MVC_.Models.Entites.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Appointment", b =>
                {
                    b.Navigation("Reports")
                        .IsRequired();
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dental_lab_Application_MVC_.Models.Entites.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
